"""
Django settings for xyq project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--wx^-#(!-eo$-@8ok@19_u8$il4pj_7!2xz9+l)&b-t4_4to-$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.0.2.2','localhost']


# Application definition

INSTALLED_APPS = [
    'admin_interface',
    'colorfield',  # 依赖
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',#json web tokens
    'corsheaders',
    'course',
    'classes',
    'users'
]

X_FRAME_OPTIONS = "SAMEORIGIN"
SILENCED_SYSTEM_CHECKS = ["security.W019"]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'xyq.middleware.security_logging.SecurityLoggingMiddleware'
]

ROOT_URLCONF = 'xyq.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'xyq.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'xyq',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# 管理员账号 admin ,密码 root123

AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',# 全局 JWT 认证
    ),
}
# Simple JWT 可选配置
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),  # Access Token 有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Refresh Token 有效期
    'ROTATE_REFRESH_TOKENS': True,                   # 刷新时生成新 Refresh Token
    'BLACKLIST_AFTER_ROTATION': True,                # 旧 Refresh Token 加入黑名单
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# 静态文件(CSS/JS/图片),用{% static %}模版标签访问
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 用户上传文件(头像/文档)，用.url 属性访问
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# settings.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    # 定义 Formatters（格式化器）
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'style': '{',
        },
    },

    # 定义 Handlers（处理器）
    'handlers': {
        '403_file': {
            'level': 'WARNING',  # 记录 WARNING 及以上级别日志
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 关键！必须是正确的类名
            'filename': os.path.join(BASE_DIR, 'logs', '403_errors.log'),  # 绝对路径
            'formatter': 'verbose',  # 必须匹配上方定义的 formatter 名称
            'when':'midnight',
            'encoding': 'utf-8',
            'backupCount': 30,
        },
    },

    # 定义 Loggers（日志器）
    'loggers': {
        'django.security': {  # 专门捕获安全相关日志
            'handlers': ['403_file'],
            'level': 'WARNING',  # 日志级别需与 handler 一致
            'propagate': True,  # 允许传递给上级 logger
        },
    },
}

# 确保 logs 目录存在
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)